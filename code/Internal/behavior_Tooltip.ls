property mySprite, getPDLError, myString, myDelay, myPosition, myDisplaySprite, myHideFlag, myDisplayList, myStartTicks, myDisplayFlag

on getBehaviorDescription me
  return "TOOLTIP" & RETURN & RETURN & "Generates a tool tip when the user rolls over the sprite." & RETURN & RETURN & "NOTE: This behavior calls the 'Display Text' behavior to actually show the message. " & "The 'Display Text' behavior must be attached to a different sprite which contains either a Field or a Text member." & RETURN & RETURN & "If such a sprite exists, it will automatically be selected in the Behavior Parameters dialog." & RETURN & RETURN & "If you wish the Tooltip to appear in a given position relative to the current sprite, choose the appropriate position in the Behavior Parameters dialog, and ensure that the associated 'Display Text' behavior is set to act as a Tooltip. " & "(If the 'Display Text' behavior is set to act as a Status Bar, then it will ignore any position data and appear in a fixed position)." & RETURN & RETURN & "You can choose to have the tooltip appear immediately on rollover, or to appear only if the mouse remains over the sprite for a given period. " & "You can also choose to have the tooltip disappear if the user clicks on the sprite." & RETURN & RETURN & "The Behavior Parameters dialog has limited space for entering a tool tip message. " & "In particular, it will not accept a string which contains the RETURN character. " & "If you need to display a long Tooltip which consists of several lines of text, and which must appear at the position of this sprite, then you must use send a message to this behavior containing the requiresd string. " & "For example:" & RETURN & RETURN & "  SendSprite (1, #Tooltip_SetMessage, " & QUOTE & "This message consists" & QUOTE & "&RETURN&" & QUOTE & "of two lines of text" & QUOTE & ")" & RETURN & RETURN & "This would produce the following message when the mouse rolls over sprite 1:" & RETURN & RETURN & "     This message consists" & RETURN & "     of two lines of text" & RETURN & RETURN & "If the tooltip generated by this behavior is to be diplayed in a Status bar then this step may be needed. " & " The 'Display Text' behavior will ensure that a long line of text is wrapped in the Status bar, and that scroll bars appear if necessary." & RETURN & RETURN & "PERMITTED MEMBER TYPES:" & RETURN & "All" & RETURN & RETURN & "PARAMETERS:" & RETURN & "* Tool tip to display (single-line string)" & RETURN & "* Delay before displaying tool tip (0 - 2 seconds)" & RETURN & "* Hide tool tip if sprite is clicked? (TRUE | FALSE)" & RETURN & "* Position of tool tip relative to the sprite" & RETURN & "  (This will be ignored if the 'Display Text' behavior is set to act as a status bar)." & RETURN & "* Number of the sprite where tool tip is to be displayed." & RETURN & "  (This sprite should have the 'Display Text' behavior attached to it. " & " If the given sprite is moved an authortime alert will invite you to update the Behavior Parameters)." & RETURN & RETURN & "PUBLIC METHODS:" & RETURN & "=> Set the tooltip message (allows the RETURN character)" & RETURN & "=> Obtain behavior reference" & RETURN & RETURN & "ASSOCIATED BEHAVIORS:" & RETURN & "+ Display Text - ESSENTIAL - must be attached to a Field or Text sprite which covers the same span of frames." & RETURN & RETURN & "You can find the 'Display Text' behavior in the Library Palette, under Controls > Display Text."
end

on getBehaviorTooltip me
  return "Use with any type of member." & RETURN & RETURN & "Generates a tool tip message when the mouse is over the sprite." & RETURN & RETURN & "This behavior requires that the 'Display Text' behavior be available on a Field or Text sprite to display the messages that it generates. " & "If no such sprite is available an alert will appear (authortime only)." & RETURN & RETURN & "The parameter set for the associated 'Display Text' behavior determines whether the tool tip message appears in a Status Bar or as a temporary Tooltip display over or near this sprite."
end

on beginSprite me
  Initialize(me)
end

on prepareFrame me
  CheckStatus(me)
end

on mouseEnter me
  myStartTicks = the ticks + myDelay
end

on mouseLeave me
  myStartTicks = the maxinteger
end

on Initialize me
  mySprite = sprite(me.spriteNum)
  myMember = mySprite.member
  myDisplayList = []
  myStartTicks = the maxinteger
end

on CheckStatus me
  if myStartTicks < the ticks then
    if myHideFlag then
      if the mouseDown then
        if myDisplayFlag then
          HideTip(me)
        end if
        exit
      end if
    end if
    if myDisplayFlag then
      exit
    end if
    ShowTip(me)
  else
    if myDisplayFlag then
      HideTip(me)
    end if
  end if
end

on ShowTip me
  myDisplayFlag = 1
  case myPosition of
    "centered above":
      theAlignment = #bottomCenter
      displayLoc = point((mySprite.left + mySprite.right) / 2, mySprite.top)
    "centered below":
      displayLoc = point((mySprite.left + mySprite.right) / 2, mySprite.bottom)
      theAlignment = #topCenter
    "at topLeft":
      displayLoc = point(mySprite.left, mySprite.top)
      theAlignment = #topLeft
    "at topRight":
      displayLoc = point(mySprite.right, mySprite.top)
      theAlignment = #topright
    "centered":
      centerH = (mySprite.left + mySprite.right) / 2
      centerV = (mySprite.top + mySprite.bottom) / 2
      displayLoc = point(centerH, centerV)
      theAlignment = #center
    "at bottomLeft":
      displayLoc = point(mySprite.left, mySprite.bottom)
      theAlignment = #bottomleft
    "at bottomRight":
      displayLoc = point(mySprite.right, mySprite.bottom)
      theAlignment = #bottomright
    "at regPoint":
      displayLoc = mySprite.loc
      theAlignment = #center
    "under the mouse":
      displayLoc = the mouseLoc
      theAlignment = #center
  end case
  if not myDisplayList.count() then
    EnrollDisplaySprite(me)
  end if
  call(#DisplayText_SetText, myDisplayList, myString, displayLoc, theAlignment)
end

on HideTip me
  myDisplayFlag = 0
  if not myDisplayList.count() then
    EnrollDisplaySprite(me)
  end if
  call(#DisplayText_SetText, myDisplayList, EMPTY)
end

on EnrollDisplaySprite me
  sendSprite(myDisplaySprite, #DisplayText_Enroll, myDisplayList)
  if not myDisplayList.count() then
    sendAllSprites(#DisplayText_Enroll, myDisplayList)
    if not myDisplayList.count() then
      ErrorAlert(me, #noValidSprites, myDisplaySprite)
    else
      ErrorAlert(me, #invalidSpriteNumber, myDisplaySprite)
    end if
  end if
end

on GetDisplaySprite me
  displayScriptMember = the number of member "Display Text"
  if displayScriptMember > 0 then
    displayScriptMember = member(displayScriptMember)
    repeat with theSprite = 1 to the lastChannel
      theScripts = sprite(theSprite).scriptList
      scriptCount = theScripts.count()
      repeat while scriptCount
        if theScripts[scriptCount][1] = displayScriptMember then
          return theSprite
        end if
        scriptCount = scriptCount - 1
      end repeat
    end repeat
  end if
  return the currentSpriteNum + 1
end

on Tooltip_SetMessage me, theString
  case ilk(theString) of
    #string:
    otherwise:
      return #invalidTypeError
  end case
  myString = theString
end

on Tooltip_GetReference me
  return me
end

on ErrorAlert me, theError, data
  behaviorName = string(me)
  delete word 1 of behaviorName
  delete char -30001 of behaviorName
  delete char -30001 of behaviorName
  case data.ilk of
    #void:
      data = "<void>"
    #symbol:
      data = "#" & data
  end case
  case theError of
    #invalidSpriteNumber:
      if the runMode = "Author" then
        Message = substituteStrings(me, "Sprite ^3 did not respond to a #DisplayText call. " & " Another sprite will be used. " & " Please open the Behavior Parameters dialog to choose the correct sprite for displaying the Tooltip message.", ["^0": the frame, "^1": me.spriteNum, "^2": behaviorName, "^3": data])
      end if
    #noValidSprites:
      if the runMode = "Author" then
        Message = substituteStrings(me, "BEHAVIOR ERROR: Frame ^0, Sprite ^1 " & RETURN & "Behavior ^2" & RETURN & RETURN & "No sprites responded to a #DisplayText call." & RETURN & RETURN & "Please ensure that the '^3' behavior is attached to a Field or Text Sprite in the same frames as Sprite ^1.", ["^0": the frame, "^1": me.spriteNum, "^2": behaviorName, "^3": "Display Text"])
      end if
  end case
end

on substituteStrings me, parentString, childStringList
  i = childStringList.count()
  repeat while i
    tempString = EMPTY
    dummyString = childStringList.getPropAt(i)
    replacement = childStringList[i]
    lengthAdjust = dummyString.char.count - 1
    repeat while 1
      position = offset(dummyString, parentString)
      if not position then
        parentString = tempString & parentString
        exit repeat
        next repeat
      end if
      if position <> 1 then
        tempString = tempString & parentString.char[1..position - 1]
      end if
      tempString = tempString & replacement
      delete me.char[1..position + lengthAdjust]
    end repeat
    i = i - 1
  end repeat
  return parentString
end

on isOKToAttach me, aSpriteType
  return aSpriteType = #graphic
end

on getPropertyDescriptionList me
  displaySprite = GetDisplaySprite(me)
  return [#myString: [#comment: "Text of tool tip", #format: #string, #default: "Insert your single-line tool tip here"], #myDelay: [#comment: "Pause before showing tool tip (ticks)", #format: #integer, #range: [#min: 0, #max: 120], #default: 30], #myHideFlag: [#comment: "Hide tool tip if user clicks on sprite?", #format: #boolean, #default: 1], #myPosition: [#comment: "Tool tip position relative to sprite (see notes)", #format: #string, #range: ["centered above", "at topLeft", "at topRight", "centered", "at bottomLeft", "at bottomRight", "centered below", "at regPoint", "under the mouse"], #default: "centered"], #myDisplaySprite: [#comment: "Use which sprite to display tooltip?", #format: #integer, #range: [#min: 1, #max: the lastChannel], #default: displaySprite]]
end
